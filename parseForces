#!/usr/bin/awk -f

###################################################################################
#                                                                                 #
#============================= DESCRIPTION:=======================================#
# This script will parse the content of 'forces.dat' generated by the forces      #
# function object in OpenFOAM (Foundation versions) and output a space separated  #
# values (by default) or a Comma Separated Values (CSV) file.                     #
#                                                                                 #
#=============================== USAGE: ==========================================#
#  													                              #
# <this-script> [--to-csv] path/to/the/file/forces.dat > forces.csv               #
#																				  #
#============================= LAST UPDATE: ======================================#
# Date: Sep 3, 2021																  #
#																				  #
# AUTHOR: S.OUCHENE																  #
###################################################################################

function printUsage(){
	print "Usage:\n";
	print "\033[32m" ENVIRON["_"] " " "[--to-csv] forces.dat" "\033[0m";
	print "\n to redirect the stdout to a new file, you can use:";
	print "\033[32m" ENVIRON["_"] " " "[--to-csv] /path/to/the/file/forces.dat > forces.csv" "\033[0m";
}

function getArguments(){
	if (ARGC > 2)
	{
		if (tolower(ARGV[1]) == "--to-csv"){
			OFS=",";
			ARGV[1]="";
		} 
		else if (tolower(ARGV[2]) == "--to-csv") {
			OFS = ",";
			ARGV[2]="";			
		}
	}
	else if (ARGC == 2){
		OFS=" ";
		if (tolower(ARGV[1]) == "--to-csv") {
			print "\033[31m" "***Error***: Please provide an input forces.dat file." "\033[0m";
			printUsage();
			exit -1;
		}
	}
	else{
		print "\033[31m" "***Error***: Please provide an input forces.dat file." "\033[0m";
		printUsage();
		exit -1;
			
	}

}

function printHeader(){

	print "# Time"
	print "# FPX: X component of pressure forces"
	print "# FPY: Y component of pressure forces"
	print "# FPZ: Z component of pressure forces"
	print "# FVX: X component of viscous forces"
	print "# FVY: Y component of viscous forces"
	print "# FVZ: Z component of viscous forces"
	print "# FPORX: X component of porous forces"
	print "# FPORY: Y component of porous forces"
	print "# FPORZ: Z component of porous forces"
	print "# MPX: X component of pressure moments"
	print "# MPY: Y component of viscous moments"
	print "# MPZ: Z component of viscous moments"
	print "# MVX: X component of viscous moments"
	print "# MVY: Y component of viscous moments"
	print "# MVZ: Z component of viscous moments"
	print "# MPORX: X component of porous moments"
	print "# MPORY: Y component of porous moments"
	print "# MPORZ: Z component of porous moments"
	print "#" "Time","FPX","FPY","FPZ","FVX","FVY","FVZ",\
		  "FPORX","FPORY","FPORZ","MPX","MPY","MPZ","MVX",\
		  "MVY","MVZ","MPORX","MPORY","MPORZ";
}

BEGIN{
	TIME=1; # The time
	FPX=2; 	# The X component of pressure forces
	FPY=3;	# The Y component of pressure forces
	FPZ=4;	# The Z component of pressure forces
	FVX=5;	# The X component of viscous forces
	FVY=6;	# The Y component of viscous forces
	FVZ=7;	# The Z component of viscous forces
	FPORX=8;	# The X component of porous forces
	FPORX=9;	# The X component of porous forces
	FPORX=10;	# The X component of porous forces
	MPX=11;	# The X component of pressure moments
	MPY=12;	# The Y component of pressure moments
	MPZ=13; # The Z component of pressure moments
	MVX=14;	# the X component of viscous moments
	MVY=15;	# the Y component of viscous moments
	MVZ=16;	# the Z component of viscous moments
	MPORX=17;	# the X component of porous moments
	MPORY=18;	# the Y component of porous moments
	MPORZ=19;	# the Z component of porous moments

	# Set the output field separator to ','
	# OFS= (ARGV[2] == "--tocsv" || ARGV[2] == "--to-csv") ? "," : " ";

	getArguments();
	printHeader();

}

# Process only lines that DO NOT start with a # symbol
!/[[:space:]]*#/ {
	# remove the parenetheses
	gsub(/[()]/,"");
	# replace all whitespaces (tabs, space) with a single space character
	gsub(/[\t ]+/," ");
	print $TIME, $FPX, $FPY,$FPZ, $FVX, $FVY,$FVZ,$FPORX,$FPORY,$FPORZ,$MPX,\
		  $MPY,$MPZ,$MVX,$MVY,$MVZ,$MPORX,$MPORY,$MPORZ
}

END{
}
